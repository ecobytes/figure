#!/usr/bin/env bash
set -eo pipefail
shopt -s nullglob

export FIGURE_DISTRO=${FIGURE_DISTRO:="ubuntu"}
export FIGURE_IMAGE=${FIGURE_IMAGE:="progrium/buildstep"}
export FIGURE_ROOT=${FIGURE_ROOT:=~figure}

export PLUGIN_PATH=${PLUGIN_PATH:="/var/lib/figure/plugins"}
export FIGURE_NOT_IMPLEMENTED_EXIT=10
export FIGURE_VALID_EXIT=0

[[ -f $FIGURE_ROOT/figurerc ]] && source $FIGURE_ROOT/figurerc
[[ -d $FIGURE_ROOT/.figurerc ]] && for f in $FIGURE_ROOT/.figurerc/*; do source $f; done

[[ $FIGURE_TRACE ]] && set -x

if [[ $(id -un) != "figure" && $1 != plugins-install* && $1 != "plugins-update" ]]; then
  sudo -u figure -E -H $0 "$@"
  exit
fi

if [[ -n "$SSH_ORIGINAL_COMMAND" ]]; then
  export -n SSH_ORIGINAL_COMMAND
  if [[ $1 =~ config-* ]];then
    xargs $0 <<<$SSH_ORIGINAL_COMMAND
    exit $?
  else
    $0 $SSH_ORIGINAL_COMMAND
    exit $?
  fi
fi

case "$1" in
  receive)
    APP="$2"

    echo "-----> Cleaning up ..."
    figure cleanup
    echo "-----> Building $APP ..."
    cat | figure build $APP
    echo "-----> Deploying $APP ..."
    figure deploy $APP
    echo "=====> Application deployed:"
    figure urls $APP | sed "s/^/       /"
    echo
    ;;

  build)
    APP="$2"; CACHE_DIR="$FIGURE_ROOT/$APP/cache"
    APP_DIR="$FIGURE_ROOT/$APP/app"

    sudo rm -rf $APP_DIR
    mkdir -p $APP_DIR
    cat | tar -xC $APP_DIR

    pluginhook pre-build $APP

    FIG_ARGS=$(: | pluginhook fig-args $APP build)
    echo "Building docker images, it may take some time ..."
    cd $APP_DIR && fig $FIG_ARGS build > /dev/null

    FIG_ARGS=$(: | pluginhook fig-args $APP pull)
    echo "Pulling service images, it may take some time ..."
    cd $APP_DIR && fig $FIG_ARGS pull > /dev/null

    pluginhook post-build $APP
    ;;

  deploy)
    APP="$2"; APP_DIR="$FIGURE_ROOT/$APP/app"
    pluginhook pre-deploy $APP

    figure ps:restart $APP

    trap -        INT TERM EXIT
    ;;

  post-deploy)
    APP="$2"; APP_DIR="$FIGURE_ROOT/$APP/app"
    cd $APP_DIR

    FIG_ARGS=$(: | pluginhook fig-args $APP up)
    fig $FIG_ARGS up -d

    expose_port=$(cat fig.yml | shyaml get-value web.ports.0)
    IFS=':' read -a expose_port_arr <<< $expose_port
    private_port=${expose_port_arr[${#expose_port_arr[@]}-1]}

    FIG_ARGS=$(: | pluginhook fig-args $APP port)
    ipaddr_port=$(fig $FIG_ARGS port web $private_port)
    IFS=':' read -a ipaddr_port_arr <<< $ipaddr_port
    ipaddr="127.0.0.1"
    port=${ipaddr_port_arr[1]}

    echo "http://$(< "$FIGURE_ROOT/HOSTNAME"):$port" > "$FIGURE_ROOT/$APP/URL"

    echo "-----> Running post-deploy"
    pluginhook post-deploy  $APP $port $ipaddr

    FIG_ARGS=$(: | pluginhook fig-args $APP ps)
    ps=$(fig $FIG_ARGS ps | sed "1 d" | sed "1 d" | awk -F" " '{print $1}')

    echo "-----> Figure started successful, waiting for them ..."
    set -m
    (
        for container in $ps; do
            echo "       Container $container ..."
            (docker wait $container || (echo "       Container $container exited" && kill 0)) &
        done
        wait
    )

    echo "-----> Exiting ..."
    ;;

  cleanup)
    # delete all non-running container
    docker ps -a | grep 'Exit' | awk '{print $1}' | xargs docker rm &> /dev/null || true
    ;;

  plugins)
    ls -1 -d $PLUGIN_PATH/*/
    ;;

  plugins-install)
    pluginhook install
    ;;

  plugins-install-dependencies)
    pluginhook dependencies
    ;;

  plugins-update)
    pluginhook update
    ;;

  help|'')
    echo "Usage: figure COMMAND <app> [command-specific-options]"
    echo ""
    echo "Options:"

    cat<<EOF | pluginhook commands help | sort
    help                                            Print the list of commands
    plugins                                         Print active plugins
    plugins-install                                 Install active plugins
    plugins-update                                  Update active plugins
EOF
    ;;

  *)
    implemented=0
    for script in $PLUGIN_PATH/*/commands; do
      set +e; $script "$@" ; exit_code=$? ; set -e
      if [ "$exit_code" -eq "$FIGURE_NOT_IMPLEMENTED_EXIT" ]; then
        continue
      fi

      implemented=1
      if [ "$exit_code" -ne "$FIGURE_VALID_EXIT" ]; then
        exit $exit_code
      fi
    done

    if [ "$implemented" -eq 0 ]; then
      echo " !    \`$*\` is not a figure command."
      echo " !    See \`figure help\` for a list of available commands."
      exit 1
    fi
    ;;

esac
